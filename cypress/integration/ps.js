// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });                     
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFn"] = applyFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["applicativeFn"] = applicativeFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };
  var bindFn = new Bind(function () {
      return Control_Apply.applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });                    
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["bindFn"] = bindFn;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var monadFn = new Monad(function () {
      return Control_Applicative.applicativeFn;
  }, function () {
      return Control_Bind.bindFn;
  });
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["monadFn"] = monadFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];              
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var monadAskFun = new MonadAsk(function () {
      return Control_Monad.monadFn;
  }, Control_Category.identity(Control_Category.categoryFn));
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["monadAskFun"] = monadAskFun;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  }; 
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $69 = Data_Functor.map(dictFunctor);
          return function ($70) {
              return mapReaderT($69($70));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["bindReaderT"] = bindReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Cypress"] = $PS["Cypress"] || {};
  var exports = $PS["Cypress"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];                
  var runCypress = Control_Monad_Reader_Trans.runReaderT;
  exports["runCypress"] = runCypress;
})(PS);
(function($PS) {
  "use strict";
  $PS["Cypress.Ask"] = $PS["Cypress.Ask"] || {};
  var exports = $PS["Cypress.Ask"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var naskC3 = function (f) {
      return function (s) {
          return function (t) {
              return function (u) {
                  return Control_Monad_Reader_Trans.ReaderT(Control_Applicative.pure(Control_Applicative.applicativeFn)(function () {
                      return f(s, t, u);
                  }));
              };
          };
      };
  };
  var naskC2 = function (f) {
      return function (s) {
          return function (t) {
              return Control_Monad_Reader_Trans.ReaderT(Control_Applicative.pure(Control_Applicative.applicativeFn)(function () {
                  return f(s, t);
              }));
          };
      };
  };
  var naskC1 = function (f) {
      return function (s) {
          return Control_Monad_Reader_Trans.ReaderT(Control_Applicative.pure(Control_Applicative.applicativeFn)(function () {
              return f(s);
          }));
      };
  };
  var askC5 = function (f) {
      return function (s) {
          return function (t) {
              return function (u) {
                  return function (v) {
                      return Control_Monad_Reader_Trans.ReaderT(Control_Bind.bind(Control_Bind.bindFn)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Class.monadAskFun))(function (cy) {
                          return Control_Applicative.pure(Control_Applicative.applicativeFn)(function () {
                              return f(s, t, u, v, cy);
                          });
                      }));
                  };
              };
          };
      };
  };
  var askC4 = function (f) {
      return function (s) {
          return function (t) {
              return function (u) {
                  return Control_Monad_Reader_Trans.ReaderT(Control_Bind.bind(Control_Bind.bindFn)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Class.monadAskFun))(function (cy) {
                      return Control_Applicative.pure(Control_Applicative.applicativeFn)(function () {
                          return f(s, t, u, cy);
                      });
                  }));
              };
          };
      };
  };
  var askC2 = function (f) {
      return function (s) {
          return Control_Monad_Reader_Trans.ReaderT(Control_Bind.bind(Control_Bind.bindFn)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Class.monadAskFun))(function (cy) {
              return Control_Applicative.pure(Control_Applicative.applicativeFn)(function () {
                  return f(s, cy);
              });
          }));
      };
  };
  exports["askC2"] = askC2;
  exports["askC4"] = askC4;
  exports["askC5"] = askC5;
  exports["naskC1"] = naskC1;
  exports["naskC2"] = naskC2;
  exports["naskC3"] = naskC3;
})(PS);
(function(exports) {
                                                                                                        
  exports.clickFn = function clickFn(cy) { return cy.click();  }          

  // both
  const containsArgs = (isJust, fromJust, props) => {
    if(isJust(props.selector)) {
      const selector = fromJust(props.selector);
      const options = isJust(props.options) ? fromJust(props.options) : undefined;
      return [selector, props.content, options];
    }
    else {
      const options = isJust(props.options) ? fromJust(props.options) : undefined;
      return [props.content, options];
    }
  };

  exports.containsFn = (isJust, fromJust, props, cy) => {
    return cy.contains(...containsArgs(isJust, fromJust, props))
  }                                                        
  // root
  exports.execFn = function execFn(a, cy) { return cy.exec(a);  }
  exports.firstFn = function firstFn(a) { return a.first();  }            
  // root
  exports.getFn = function getFn(isJust, fromJust, actionString, props, cy) {
    const action = actionString(props.action);
    const options = isJust(props.options) ? fromJust(props.options) : undefined;
    return cy.get(action, options);
  }                                                                            
  // root
  exports.goFn = function goFn(a, cy) { return cy.go(a);  }                  
  // root
  exports.logFn = function logFn(a, cy) { return cy.log(a);  }        
  exports.should1Fn = function should1Fn(a, b, c) { return c.should(a, b); }
  // exports.taskFn = function taskFn(a, cy) { return cy.task(a);  }
  exports.thenFn = function thenFn(f, a) { return a.then(f);  }           
  exports.typeFn = function typeFn(a, cy) { return cy.type(a);  }                  
  // root
  exports.visitFn = function visitFn(url, cy) { return cy.visit(url); }
})(PS["Cypress.Foreign"] = PS["Cypress.Foreign"] || {});
(function($PS) {
  "use strict";
  $PS["Cypress.Foreign"] = $PS["Cypress.Foreign"] || {};
  var exports = $PS["Cypress.Foreign"];
  var $foreign = $PS["Cypress.Foreign"];               
  var Selector = (function () {
      function Selector(value0) {
          this.value0 = value0;
      };
      Selector.create = function (value0) {
          return new Selector(value0);
      };
      return Selector;
  })();
  var Alias = (function () {
      function Alias(value0) {
          this.value0 = value0;
      };
      Alias.create = function (value0) {
          return new Alias(value0);
      };
      return Alias;
  })();
  exports["Selector"] = Selector;
  exports["Alias"] = Alias;
  exports["clickFn"] = $foreign.clickFn;
  exports["containsFn"] = $foreign.containsFn;
  exports["execFn"] = $foreign.execFn;
  exports["firstFn"] = $foreign.firstFn;
  exports["getFn"] = $foreign.getFn;
  exports["goFn"] = $foreign.goFn;
  exports["logFn"] = $foreign.logFn;
  exports["should1Fn"] = $foreign.should1Fn;
  exports["thenFn"] = $foreign.thenFn;
  exports["typeFn"] = $foreign.typeFn;
  exports["visitFn"] = $foreign.visitFn;
})(PS);
(function($PS) {
  "use strict";
  $PS["Cypress.Chai"] = $PS["Cypress.Chai"] || {};
  var exports = $PS["Cypress.Chai"];
  var Cypress_Ask = $PS["Cypress.Ask"];
  var Cypress_Foreign = $PS["Cypress.Foreign"];

  // Not -- expect(name).to.not.equal('Jane')
  var Not = function (x) {
      return x;
  };

  // Deep	-- expect(obj).to.deep.equal({ name: 'Jane' })
  // Nested	-- expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]')
  // -- expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'})
  // Ordered	-- expect([1, 2]).to.have.ordered.members([1, 2]).but.not.have.ordered.members([2, 1])
  // Any	-- expect(arr).to.have.any.keys('age')
  // All	-- expect(arr).to.have.all.keys('name', 'age')
  // A(type)
  // An(type) -- expect('test').to.be.a('string')
  // Include(value)
  // -- Aliases: contain, includes, contains	-- expect([1,2,3]).to.include(2)
  // Ok	-- expect(undefined).to.not.be.ok
  // True	-- expect(true).to.be.true
  // False	-- expect(false).to.be.false
  // Null	-- expect(null).to.be.null
  // Undefined	-- expect(undefined).to.be.undefined
  // Exist	-- expect(myVar).to.exist
  // Empty	-- expect([]).to.be.empty
  // Arguments
  // -- Aliases: Arguments	-- expect(arguments).to.be.arguments
  // DeepEqual(value)	-- expect({ name: 'Jane' }).to.deep.equal({ name: 'Jane' })
  // InstanceOf(constructor)
  // -- Aliases: instanceof	-- expect([1, 2, 3]).to.be.instanceOf(Array)
  // Property(name, [value])	-- expect(obj).to.have.property('name')
  // DeepProperty(name, [value])	-- expect(deepObj).to.have.deep.property('tests[1]', 'e2e')
  // OwnProperty(name)
  // HaveOwnProperty-- Aliases: haveOwnProperty, own.property	-- expect('test').to.have.ownProperty('length')
  // OwnPropertyDescriptor(name)
  // -- Aliases: haveOwnPropertyDescriptor	-- expect({a: 1}).to.have.ownPropertyDescriptor('a')
  // LengthOf(value)	-- expect('test').to.have.lengthOf(3)
  // Match(RegExp)
  // -- Aliases: matches	-- expect('testing').to.match(/^test/)
  // String(string)	-- expect('testing').to.have.string('test')
  // Keys(key1, [key2], […])
  // -- Aliases: key	-- expect({ pass: 1, fail: 2 }).to.have.keys('pass', 'fail')
  // Throw(constructor)
  // -- Aliases: throws, Throw	-- expect(fn).to.throw(Error)
  // RespondTo(method)
  // -- Aliases: respondsTo	-- expect(obj).to.respondTo('getName')
  // Itself	-- expect(Foo).itself.to.respondTo('bar')
  // Satisfy(method)
  // -- Aliases: satisfies	-- expect(1).to.satisfy((num) => { return num > 0 })
  // CloseTo(expected, delta)
  // -- Aliases: approximately	-- expect(1.5).to.be.closeTo(1, 0.5)
  // Members(set)	-- expect([1, 2, 3]).to.include.members([3, 2])
  // OneOf(values)	-- expect(2).to.be.oneOf([1,2,3])
  // Change(function)
  // -- Aliases: changes	-- expect(fn).to.change(obj, 'val')
  // Increase(function)
  // -- Aliases: increases	-- expect(fn).to.increase(obj, 'val')
  // Decrease(function)
  // -- Aliases: decreases	-- expect(fn).to.decrease(obj, 'val')
  var ShouldStr = function (toStr) {
      this.toStr = toStr;
  };
  var Should = function (ShouldStr0, toShould, toShould$prime) {
      this.ShouldStr0 = ShouldStr0;
      this.toShould = toShould;
      this["toShould'"] = toShould$prime;
  };
  var toStr = function (dict) {
      return dict.toStr;
  };
  var toShould$prime = function (dict) {
      return dict["toShould'"];
  };
  var toShould = function (dict) {
      return dict.toShould;
  }; 
  var shouldStrNot = function (dictShouldStr) {
      return new ShouldStr(function (v) {
          return "not." + toStr(dictShouldStr)(v);
      });
  }; 
  var shouldStrLength = new ShouldStr(function (v) {
      return "have.length";
  });
  var shouldNot = function (dictShould) {
      return new Should(function () {
          return shouldStrNot(dictShould.ShouldStr0());
      }, function (a) {
          return toShould$prime(shouldNot(dictShould))(toStr(shouldStrNot(dictShould.ShouldStr0()))(a))(a);
      }, function (s) {
          return function (v) {
              return toShould$prime(dictShould)(s)(v);
          };
      });
  };
  var shouldLengthElements = new Should(function () {
      return shouldStrLength;
  }, function (a) {
      return toShould$prime(shouldLengthElements)(toStr(shouldStrLength)(a))(a);
  }, function (s) {
      return function (v) {
          return Cypress_Ask.naskC3(Cypress_Foreign.should1Fn)(s)(v);
      };
  });
  exports["toShould"] = toShould;
  exports["Not"] = Not;
  exports["shouldLengthElements"] = shouldLengthElements;
  exports["shouldNot"] = shouldNot;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Function = $PS["Data.Function"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromJust"] = fromJust;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Cypress.Actions"] = $PS["Cypress.Actions"] || {};
  var exports = $PS["Cypress.Actions"];
  var Cypress_Ask = $PS["Cypress.Ask"];
  var Cypress_Chai = $PS["Cypress.Chai"];
  var Cypress_Foreign = $PS["Cypress.Foreign"];
  var Data_Maybe = $PS["Data.Maybe"];                  
  var visit = Cypress_Ask.askC2(Cypress_Foreign.visitFn);     
  var typ = Cypress_Ask.naskC2(Cypress_Foreign.typeFn);
  var thn = Cypress_Ask.naskC2(Cypress_Foreign.thenFn);         
  var should = function (dictShould) {
      return Cypress_Chai.toShould(dictShould);
  };                                                    
  var log = Cypress_Ask.askC2(Cypress_Foreign.logFn);  
  var go = Cypress_Ask.askC2(Cypress_Foreign.goFn);              
  var fromJust = Data_Maybe.fromJust();                      
  var first = Cypress_Ask.naskC1(Cypress_Foreign.firstFn);  
  var exec = Cypress_Ask.askC2(Cypress_Foreign.execFn);                                       
  var contains = Cypress_Ask.askC4(Cypress_Foreign.containsFn)(Data_Maybe.isJust)(fromJust);
  var click = Cypress_Ask.naskC1(Cypress_Foreign.clickFn);
  var actionString = function (v) {
      if (v instanceof Cypress_Foreign.Selector) {
          return v.value0;
      };
      if (v instanceof Cypress_Foreign.Alias) {
          return "@" + v.value0;
      };
      throw new Error("Failed pattern match at Cypress.Actions (line 114, column 16 - line 116, column 22): " + [ v.constructor.name ]);
  };
  var get = Cypress_Ask.askC5(Cypress_Foreign.getFn)(Data_Maybe.isJust)(fromJust)(actionString);
  exports["click"] = click;
  exports["contains"] = contains;
  exports["exec"] = exec;
  exports["first"] = first;
  exports["get"] = get;
  exports["go"] = go;
  exports["log"] = log;
  exports["should"] = should;
  exports["thn"] = thn;
  exports["typ"] = typ;
  exports["visit"] = visit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Test.Main"] = $PS["Test.Main"] || {};
  var exports = $PS["Test.Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Cypress = $PS["Cypress"];
  var Cypress_Actions = $PS["Cypress.Actions"];
  var Cypress_Chai = $PS["Cypress.Chai"];
  var Cypress_Foreign = $PS["Cypress.Foreign"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];                
  var amazon = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.visit("/"))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.get({
          action: new Cypress_Foreign.Selector("a.a-carousel-goto-prevpage"),
          options: Data_Maybe.Nothing.value
      }))(Cypress_Actions.should(Cypress_Chai.shouldNot(Cypress_Chai.shouldLengthElements))(Cypress_Chai.Not(2))))(Cypress_Actions.first))(Cypress_Actions.click)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.get({
              action: new Cypress_Foreign.Selector("#twotabsearchtextbox"),
              options: Data_Maybe.Nothing.value
          }))(Cypress_Actions.typ("HEHEHE"))))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.visit("/dp/B07X6C9RMF/ref=ods_gw_vicc_blinkmini_apr_anc"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Cypress_Actions.contains({
                      content: "Blink Home Security",
                      selector: new Data_Maybe.Just("a"),
                      options: Data_Maybe.Nothing.value
                  })))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.go("back"))(function () {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.exec("ls -la"))(Cypress_Actions.thn(function (v) {
                              return v.stdout;
                          })))(Cypress_Actions.log);
                      });
                  });
              });
          });
      });
  });
  var main = function (cy) {
      return Cypress.runCypress(amazon)(cy);
  };
  exports["amazon"] = amazon;
  exports["main"] = main;
})(PS);
module.exports = PS["Test.Main"];
