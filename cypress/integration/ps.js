// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                       
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  }; 
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $69 = Data_Functor.map(dictFunctor);
          return function ($70) {
              return mapReaderT($69($70));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["bindReaderT"] = bindReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Cypress"] = $PS["Cypress"] || {};
  var exports = $PS["Cypress"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];                
  var runCypress = Control_Monad_Reader_Trans.runReaderT;
  exports["runCypress"] = runCypress;
})(PS);
(function(exports) {
                                                                                                        
  exports.clickFn = function clickFn(cy) { return cy.click();  }          

  // both
  const containsArgs = (isJust, fromJust, props) => {
    if(isJust(props.selector)) {
      const selector = fromJust(props.selector);
      const options = isJust(props.options) ? fromJust(props.options) : undefined;
      return [selector, props.content, options];
    }
    else {
      const options = isJust(props.options) ? fromJust(props.options) : undefined;
      return [props.content, options];
    }
  };

  exports.containsFn = (isJust, fromJust, props, cy) => {
    return cy.contains(...containsArgs(isJust, fromJust, props))
  }                                                        
  // root
  exports.execFn = function execFn(a, cy) { return cy.exec(a);  }
  exports.firstFn = function firstFn(a) { return a.first();  }            
  // root
  exports.getFn = function getFn(isJust, fromJust, actionString, props, cy) {
    const action = actionString(props.action);
    const options = isJust(props.options) ? fromJust(props.options) : undefined;
    return cy.get(action, options);
  }                                                                            
  // root
  exports.goFn = function goFn(a, cy) { return cy.go(a);  }                  
  // root
  exports.logFn = function logFn(a, cy) { return cy.log(a);  }         
  // exports.taskFn = function taskFn(a, cy) { return cy.task(a);  }
  exports.thenFn = function thenFn(f, a) { return a.then(f);  }           
  exports.typeFn = function typeFn(a, cy) { return cy.type(a);  }                  
  // root
  exports.visitFn = function visitFn(url, cy) { return cy.visit(url); }
})(PS["Cypress.Actions"] = PS["Cypress.Actions"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Cypress.Ask"] = $PS["Cypress.Ask"] || {};
  var exports = $PS["Cypress.Ask"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var naskC3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return Control_Monad_Reader_Trans.ReaderT(function (cy) {
                      return function () {
                          return f(a, b, c);
                      };
                  });
              };
          };
      };
  };
  var naskC2 = function (f) {
      return function (a) {
          return function (b) {
              return Control_Monad_Reader_Trans.ReaderT(function (cy) {
                  return function () {
                      return f(a, b);
                  };
              });
          };
      };
  };
  var naskC1 = function (f) {
      return function (a) {
          return Control_Monad_Reader_Trans.ReaderT(function (cy) {
              return function () {
                  return f(a);
              };
          });
      };
  };
  var askC5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return Control_Monad_Reader_Trans.ReaderT(function (cy) {
                          return function () {
                              return f(a, b, c, d, cy);
                          };
                      });
                  };
              };
          };
      };
  };
  var askC4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return Control_Monad_Reader_Trans.ReaderT(function (cy) {
                      return function () {
                          return f(a, b, c, cy);
                      };
                  });
              };
          };
      };
  };
  var askC2 = function (f) {
      return function (a) {
          return Control_Monad_Reader_Trans.ReaderT(function (cy) {
              return function () {
                  return f(a, cy);
              };
          });
      };
  };
  exports["askC2"] = askC2;
  exports["askC4"] = askC4;
  exports["askC5"] = askC5;
  exports["naskC1"] = naskC1;
  exports["naskC2"] = naskC2;
  exports["naskC3"] = naskC3;
})(PS);
(function(exports) {
                                                                      
  exports.should1Fn = function should1Fn(a, b, c) { return c.should(a, b); }
})(PS["Cypress.Chai"] = PS["Cypress.Chai"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Cypress.Chai"] = $PS["Cypress.Chai"] || {};
  var exports = $PS["Cypress.Chai"];
  var $foreign = $PS["Cypress.Chai"];
  var Cypress_Ask = $PS["Cypress.Ask"];
  var Not = function (x) {
      return x;
  };
  var ShouldStr = function (toStr) {
      this.toStr = toStr;
  };
  var Should = function (ShouldStr0, toShould, toShould$prime) {
      this.ShouldStr0 = ShouldStr0;
      this.toShould = toShould;
      this["toShould'"] = toShould$prime;
  };
  var toStr = function (dict) {
      return dict.toStr;
  };
  var toShould$prime = function (dict) {
      return dict["toShould'"];
  };
  var toShould = function (dict) {
      return dict.toShould;
  }; 
  var shouldStrNot = function (dictShouldStr) {
      return new ShouldStr(function (v) {
          return "not." + toStr(dictShouldStr)(v);
      });
  }; 
  var shouldStrLength = new ShouldStr(function (v) {
      return "have.length";
  });
  var shouldNot = function (dictShould) {
      return new Should(function () {
          return shouldStrNot(dictShould.ShouldStr0());
      }, function (a) {
          return toShould$prime(shouldNot(dictShould))(toStr(shouldStrNot(dictShould.ShouldStr0()))(a))(a);
      }, function (s) {
          return function (v) {
              return toShould$prime(dictShould)(s)(v);
          };
      });
  };
  var shouldLengthElements = new Should(function () {
      return shouldStrLength;
  }, function (a) {
      return toShould$prime(shouldLengthElements)(toStr(shouldStrLength)(a))(a);
  }, function (s) {
      return function (v) {
          return Cypress_Ask.naskC3($foreign.should1Fn)(s)(v);
      };
  });
  exports["toShould"] = toShould;
  exports["Not"] = Not;
  exports["shouldLengthElements"] = shouldLengthElements;
  exports["shouldNot"] = shouldNot;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Function = $PS["Data.Function"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromJust"] = fromJust;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Cypress.Actions"] = $PS["Cypress.Actions"] || {};
  var exports = $PS["Cypress.Actions"];
  var $foreign = $PS["Cypress.Actions"];
  var Cypress_Ask = $PS["Cypress.Ask"];
  var Cypress_Chai = $PS["Cypress.Chai"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Selector = (function () {
      function Selector(value0) {
          this.value0 = value0;
      };
      Selector.create = function (value0) {
          return new Selector(value0);
      };
      return Selector;
  })();
  var Alias = (function () {
      function Alias(value0) {
          this.value0 = value0;
      };
      Alias.create = function (value0) {
          return new Alias(value0);
      };
      return Alias;
  })();                                         
  var visit = Cypress_Ask.askC2($foreign.visitFn);     
  var typ = Cypress_Ask.naskC2($foreign.typeFn);
  var thn = Cypress_Ask.naskC2($foreign.thenFn);         
  var should = function (dictShould) {
      return Cypress_Chai.toShould(dictShould);
  };                                             
  var log = Cypress_Ask.askC2($foreign.logFn);  
  var go = Cypress_Ask.askC2($foreign.goFn);              
  var fromJust = Data_Maybe.fromJust();               
  var first = Cypress_Ask.naskC1($foreign.firstFn);  
  var exec = Cypress_Ask.askC2($foreign.execFn);
  var containsOpt = Cypress_Ask.askC4($foreign.containsFn)(Data_Maybe.isJust)(fromJust);
  var containsSelector = function (a) {
      return function (b) {
          return containsOpt({
              selector: new Data_Maybe.Just(a),
              content: b,
              options: Data_Maybe.Nothing.value
          });
      };
  };                                              
  var click = Cypress_Ask.naskC1($foreign.clickFn);
  var actionString = function (v) {
      if (v instanceof Selector) {
          return v.value0;
      };
      if (v instanceof Alias) {
          return "@" + v.value0;
      };
      throw new Error("Failed pattern match at Cypress.Actions (line 202, column 16 - line 204, column 22): " + [ v.constructor.name ]);
  };
  var getOpt = Cypress_Ask.askC5($foreign.getFn)(Data_Maybe.isJust)(fromJust)(actionString);
  var get = function (s) {
      return getOpt({
          action: new Selector(s),
          options: Data_Maybe.Nothing.value
      });
  };
  exports["click"] = click;
  exports["containsSelector"] = containsSelector;
  exports["exec"] = exec;
  exports["first"] = first;
  exports["get"] = get;
  exports["go"] = go;
  exports["log"] = log;
  exports["should"] = should;
  exports["thn"] = thn;
  exports["typ"] = typ;
  exports["visit"] = visit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Test.Main"] = $PS["Test.Main"] || {};
  var exports = $PS["Test.Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Cypress = $PS["Cypress"];
  var Cypress_Actions = $PS["Cypress.Actions"];
  var Cypress_Chai = $PS["Cypress.Chai"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var amazon = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.visit("/"))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.get("a.a-carousel-goto-prevpage"))(Cypress_Actions.should(Cypress_Chai.shouldNot(Cypress_Chai.shouldLengthElements))(Cypress_Chai.Not(2))))(Cypress_Actions.first))(Cypress_Actions.click)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.get("#twotabsearchtextbox"))(Cypress_Actions.typ("HEHEHE"))))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.visit("/dp/B07X6C9RMF/ref=ods_gw_vicc_blinkmini_apr_anc"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Cypress_Actions.containsSelector("a")("Blink Home Security")))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.go("back"))(function () {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Cypress_Actions.exec("ls -la"))(Cypress_Actions.thn(function (v) {
                              return v.stdout;
                          })))(Cypress_Actions.log);
                      });
                  });
              });
          });
      });
  });
  var main = function (cy) {
      return Cypress.runCypress(amazon)(cy);
  };
  exports["amazon"] = amazon;
  exports["main"] = main;
})(PS);
module.exports = PS["Test.Main"];
